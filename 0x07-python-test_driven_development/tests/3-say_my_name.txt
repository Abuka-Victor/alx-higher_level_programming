The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

Import the function:
    >>> say_my_name = __import__('3-say_my_name').say_my_name

Check that Module Doc Exists:
    >>> m = __import__('3-say_my_name').__doc__
    >>> type(m)
    <class 'str'>

Check Module Doc string:
    >>> len(m) > 1
    True

Check that Module Function Doc Exists:
    >>> f = __import__('3-say_my_name').say_my_name.__doc__
    >>> type(f)
    <class 'str'>

Check Module Function Doc string:
    >>> len(f) > 1
    True

Check that Function works with right values:
    >>> say_my_name("Bob", "Ziroll")
    My name is Bob Ziroll

Check that Function works with only one positional arg:
    >>> say_my_name("Victor")
    My name is Victor

Check that TypeError is thrown when first_name is not str:
    >>> say_my_name(2.4, "Abuka")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Check that TypeError is thrown when last_name is not str:
    >>> say_my_name("Victor", [3, 4])
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

Check for empty function call:
    >>> say_my_name()
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Checking for more than 2 args:
	 >>> say_my_name("Hello", "World", "hi")
	 Traceback (most recent call last):
	 ...
	 TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given